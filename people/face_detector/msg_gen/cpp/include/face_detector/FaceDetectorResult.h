/* Auto-generated by genmsg_cpp for file /home/reza/git/people/face_detector/msg/FaceDetectorResult.msg */
#ifndef FACE_DETECTOR_MESSAGE_FACEDETECTORRESULT_H
#define FACE_DETECTOR_MESSAGE_FACEDETECTORRESULT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "people_msgs/PositionMeasurement.h"

namespace face_detector
{
template <class ContainerAllocator>
struct FaceDetectorResult_ : public ros::Message
{
  typedef FaceDetectorResult_<ContainerAllocator> Type;

  FaceDetectorResult_()
  : face_positions()
  {
  }

  FaceDetectorResult_(const ContainerAllocator& _alloc)
  : face_positions(_alloc)
  {
  }

  typedef std::vector< ::people_msgs::PositionMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::other >  _face_positions_type;
  std::vector< ::people_msgs::PositionMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::other >  face_positions;


  ROS_DEPRECATED uint32_t get_face_positions_size() const { return (uint32_t)face_positions.size(); }
  ROS_DEPRECATED void set_face_positions_size(uint32_t size) { face_positions.resize((size_t)size); }
  ROS_DEPRECATED void get_face_positions_vec(std::vector< ::people_msgs::PositionMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::other > & vec) const { vec = this->face_positions; }
  ROS_DEPRECATED void set_face_positions_vec(const std::vector< ::people_msgs::PositionMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::other > & vec) { this->face_positions = vec; }
private:
  static const char* __s_getDataType_() { return "face_detector/FaceDetectorResult"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b5dc843df183dbab7f0ab2f5ef5b6f9d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result\n\
people_msgs/PositionMeasurement[] face_positions\n\
\n\
================================================================================\n\
MSG: people_msgs/PositionMeasurement\n\
Header          header\n\
string          name\n\
string          object_id\n\
geometry_msgs/Point  pos\n\
float64         reliability\n\
float64[9]      covariance\n\
byte            initialization\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, face_positions);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, face_positions);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(face_positions);
    return size;
  }

  typedef boost::shared_ptr< ::face_detector::FaceDetectorResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_detector::FaceDetectorResult_<ContainerAllocator>  const> ConstPtr;
}; // struct FaceDetectorResult
typedef  ::face_detector::FaceDetectorResult_<std::allocator<void> > FaceDetectorResult;

typedef boost::shared_ptr< ::face_detector::FaceDetectorResult> FaceDetectorResultPtr;
typedef boost::shared_ptr< ::face_detector::FaceDetectorResult const> FaceDetectorResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::face_detector::FaceDetectorResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::face_detector::FaceDetectorResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace face_detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::face_detector::FaceDetectorResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b5dc843df183dbab7f0ab2f5ef5b6f9d";
  }

  static const char* value(const  ::face_detector::FaceDetectorResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb5dc843df183dbabULL;
  static const uint64_t static_value2 = 0x7f0ab2f5ef5b6f9dULL;
};

template<class ContainerAllocator>
struct DataType< ::face_detector::FaceDetectorResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "face_detector/FaceDetectorResult";
  }

  static const char* value(const  ::face_detector::FaceDetectorResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::face_detector::FaceDetectorResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result\n\
people_msgs/PositionMeasurement[] face_positions\n\
\n\
================================================================================\n\
MSG: people_msgs/PositionMeasurement\n\
Header          header\n\
string          name\n\
string          object_id\n\
geometry_msgs/Point  pos\n\
float64         reliability\n\
float64[9]      covariance\n\
byte            initialization\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::face_detector::FaceDetectorResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::face_detector::FaceDetectorResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.face_positions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FaceDetectorResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_detector::FaceDetectorResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::face_detector::FaceDetectorResult_<ContainerAllocator> & v) 
  {
    s << indent << "face_positions[]" << std::endl;
    for (size_t i = 0; i < v.face_positions.size(); ++i)
    {
      s << indent << "  face_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::stream(s, indent + "    ", v.face_positions[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // FACE_DETECTOR_MESSAGE_FACEDETECTORRESULT_H

