/* Auto-generated by genmsg_cpp for file /home/reza/git/people/people_msgs/msg/PositionMeasurement.msg */
#ifndef PEOPLE_MSGS_MESSAGE_POSITIONMEASUREMENT_H
#define PEOPLE_MSGS_MESSAGE_POSITIONMEASUREMENT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"

namespace people_msgs
{
template <class ContainerAllocator>
struct PositionMeasurement_ : public ros::Message
{
  typedef PositionMeasurement_<ContainerAllocator> Type;

  PositionMeasurement_()
  : header()
  , name()
  , object_id()
  , pos()
  , reliability(0.0)
  , covariance()
  , initialization(0)
  {
    covariance.assign(0.0);
  }

  PositionMeasurement_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , object_id(_alloc)
  , pos(_alloc)
  , reliability(0.0)
  , covariance()
  , initialization(0)
  {
    covariance.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object_id;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
   ::geometry_msgs::Point_<ContainerAllocator>  pos;

  typedef double _reliability_type;
  double reliability;

  typedef boost::array<double, 9>  _covariance_type;
  boost::array<double, 9>  covariance;

  typedef int8_t _initialization_type;
  int8_t initialization;


  ROS_DEPRECATED uint32_t get_covariance_size() const { return (uint32_t)covariance.size(); }
private:
  static const char* __s_getDataType_() { return "people_msgs/PositionMeasurement"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "54fa938b4ec28728e01575b79eb0ec7c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header          header\n\
string          name\n\
string          object_id\n\
geometry_msgs/Point  pos\n\
float64         reliability\n\
float64[9]      covariance\n\
byte            initialization\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, object_id);
    ros::serialization::serialize(stream, pos);
    ros::serialization::serialize(stream, reliability);
    ros::serialization::serialize(stream, covariance);
    ros::serialization::serialize(stream, initialization);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, object_id);
    ros::serialization::deserialize(stream, pos);
    ros::serialization::deserialize(stream, reliability);
    ros::serialization::deserialize(stream, covariance);
    ros::serialization::deserialize(stream, initialization);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(object_id);
    size += ros::serialization::serializationLength(pos);
    size += ros::serialization::serializationLength(reliability);
    size += ros::serialization::serializationLength(covariance);
    size += ros::serialization::serializationLength(initialization);
    return size;
  }

  typedef boost::shared_ptr< ::people_msgs::PositionMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::people_msgs::PositionMeasurement_<ContainerAllocator>  const> ConstPtr;
}; // struct PositionMeasurement
typedef  ::people_msgs::PositionMeasurement_<std::allocator<void> > PositionMeasurement;

typedef boost::shared_ptr< ::people_msgs::PositionMeasurement> PositionMeasurementPtr;
typedef boost::shared_ptr< ::people_msgs::PositionMeasurement const> PositionMeasurementConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::people_msgs::PositionMeasurement_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::people_msgs::PositionMeasurement_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace people_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::people_msgs::PositionMeasurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "54fa938b4ec28728e01575b79eb0ec7c";
  }

  static const char* value(const  ::people_msgs::PositionMeasurement_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x54fa938b4ec28728ULL;
  static const uint64_t static_value2 = 0xe01575b79eb0ec7cULL;
};

template<class ContainerAllocator>
struct DataType< ::people_msgs::PositionMeasurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "people_msgs/PositionMeasurement";
  }

  static const char* value(const  ::people_msgs::PositionMeasurement_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::people_msgs::PositionMeasurement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header          header\n\
string          name\n\
string          object_id\n\
geometry_msgs/Point  pos\n\
float64         reliability\n\
float64[9]      covariance\n\
byte            initialization\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::people_msgs::PositionMeasurement_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::people_msgs::PositionMeasurement_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::people_msgs::PositionMeasurement_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::people_msgs::PositionMeasurement_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.object_id);
    stream.next(m.pos);
    stream.next(m.reliability);
    stream.next(m.covariance);
    stream.next(m.initialization);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PositionMeasurement_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::people_msgs::PositionMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::people_msgs::PositionMeasurement_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_id);
    s << indent << "pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "reliability: ";
    Printer<double>::stream(s, indent + "  ", v.reliability);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "initialization: ";
    Printer<int8_t>::stream(s, indent + "  ", v.initialization);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PEOPLE_MSGS_MESSAGE_POSITIONMEASUREMENT_H

