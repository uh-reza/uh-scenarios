//#line 2 "/opt/ros/cturtle/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the wge100_camera package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __wge100_camera__WGE100MULTICONFIGURATOR_OLDCONFIG_H__
#define __wge100_camera__WGE100MULTICONFIGURATOR_OLDCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace wge100_camera
{
  class WGE100MultiConfigurator_oldConfigStatics;
  
  class WGE100MultiConfigurator_oldConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(WGE100MultiConfigurator_oldConfig &config, const WGE100MultiConfigurator_oldConfig &max, const WGE100MultiConfigurator_oldConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const WGE100MultiConfigurator_oldConfig &config1, const WGE100MultiConfigurator_oldConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, WGE100MultiConfigurator_oldConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const WGE100MultiConfigurator_oldConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, WGE100MultiConfigurator_oldConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const WGE100MultiConfigurator_oldConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T WGE100MultiConfigurator_oldConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (WGE100MultiConfigurator_oldConfig::* field);

      virtual void clamp(WGE100MultiConfigurator_oldConfig &config, const WGE100MultiConfigurator_oldConfig &max, const WGE100MultiConfigurator_oldConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const WGE100MultiConfigurator_oldConfig &config1, const WGE100MultiConfigurator_oldConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, WGE100MultiConfigurator_oldConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const WGE100MultiConfigurator_oldConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, WGE100MultiConfigurator_oldConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const WGE100MultiConfigurator_oldConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 44 "../cfg/WGE100MultiConfigurator_old.cfg"
      std::string camera_nodes;
//#line 47 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      std::string video_mode;
//#line 48 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool auto_exposure;
//#line 49 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double exposure;
//#line 50 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double max_exposure;
//#line 51 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool auto_gain;
//#line 52 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool companding;
//#line 53 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      int gain;
//#line 54 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      int brightness;
//#line 55 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      std::string frame_id;
//#line 56 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double first_packet_offset;
//#line 57 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool ext_trig;
//#line 58 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool rising_edge_trig;
//#line 59 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      std::string trig_controller;
//#line 60 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double trig_rate;
//#line 61 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool mirror_x;
//#line 62 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool mirror_y;
//#line 63 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool rotate_180;
//#line 64 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool enable_alternate;
//#line 65 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool auto_exposure_alternate;
//#line 66 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double exposure_alternate;
//#line 67 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      double max_exposure_alternate;
//#line 68 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool auto_gain_alternate;
//#line 69 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      int gain_alternate;
//#line 70 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      bool companding_alternate;
//#line 138 "/opt/ros/cturtle/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("WGE100MultiConfigurator_oldConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const WGE100MultiConfigurator_oldConfig &__max__ = __getMax__();
      const WGE100MultiConfigurator_oldConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const WGE100MultiConfigurator_oldConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const WGE100MultiConfigurator_oldConfig &__getDefault__();
    static const WGE100MultiConfigurator_oldConfig &__getMax__();
    static const WGE100MultiConfigurator_oldConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const WGE100MultiConfigurator_oldConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void WGE100MultiConfigurator_oldConfig::ParamDescription<std::string>::clamp(WGE100MultiConfigurator_oldConfig &config, const WGE100MultiConfigurator_oldConfig &max, const WGE100MultiConfigurator_oldConfig &min) const
  {
    return;
  }

  class WGE100MultiConfigurator_oldConfigStatics
  {
    friend class WGE100MultiConfigurator_oldConfig;
    
    WGE100MultiConfigurator_oldConfigStatics()
    {
//#line 44 "../cfg/WGE100MultiConfigurator_old.cfg"
      __min__.camera_nodes = "";
//#line 44 "../cfg/WGE100MultiConfigurator_old.cfg"
      __max__.camera_nodes = "";
//#line 44 "../cfg/WGE100MultiConfigurator_old.cfg"
      __default__.camera_nodes = "wge100_camera";
//#line 44 "../cfg/WGE100MultiConfigurator_old.cfg"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<std::string>("camera_nodes", "str", 3, "Space separated list of nodes that should be controlled by this configurator.", "", &WGE100MultiConfigurator_oldConfig::camera_nodes)));
//#line 47 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.video_mode = "";
//#line 47 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.video_mode = "";
//#line 47 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.video_mode = "640x480x30";
//#line 47 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<std::string>("video_mode", "str", 3, "Sets the camera video mode.", "", &WGE100MultiConfigurator_oldConfig::video_mode)));
//#line 48 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.auto_exposure = 0;
//#line 48 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.auto_exposure = 1;
//#line 48 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.auto_exposure = 1;
//#line 48 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("auto_exposure", "bool", 3, "Sets the camera exposure duration to automatic. Causes the @b exposure setting to be ignored.", "", &WGE100MultiConfigurator_oldConfig::auto_exposure)));
//#line 49 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.exposure = 0.0;
//#line 49 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.exposure = 0.1;
//#line 49 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.exposure = 0.01;
//#line 49 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("exposure", "double", 3, "Maximum camera exposure time in seconds. The valid range depends on the video mode.", "", &WGE100MultiConfigurator_oldConfig::exposure)));
//#line 50 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.max_exposure = 0.0;
//#line 50 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.max_exposure = 0.1;
//#line 50 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.max_exposure = 0.0;
//#line 50 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("max_exposure", "double", 3, "Maximum exposure time in seconds. Zero for automatic.", "", &WGE100MultiConfigurator_oldConfig::max_exposure)));
//#line 51 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.auto_gain = 0;
//#line 51 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.auto_gain = 1;
//#line 51 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.auto_gain = 1;
//#line 51 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("auto_gain", "bool", 3, "Sets the analog gain to automatic. Causes the @b gain setting to be ignored.", "", &WGE100MultiConfigurator_oldConfig::auto_gain)));
//#line 52 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.companding = 0;
//#line 52 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.companding = 1;
//#line 52 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.companding = 1;
//#line 52 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("companding", "bool", 3, "Turns on companding", "", &WGE100MultiConfigurator_oldConfig::companding)));
//#line 53 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.gain = 16;
//#line 53 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.gain = 64;
//#line 53 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.gain = 32;
//#line 53 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<int>("gain", "int", 3, "The camera analog gain.", "", &WGE100MultiConfigurator_oldConfig::gain)));
//#line 54 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.brightness = 1;
//#line 54 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.brightness = 64;
//#line 54 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.brightness = 58;
//#line 54 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<int>("brightness", "int", 3, "The camera brightness for automatic gain/exposure.", "", &WGE100MultiConfigurator_oldConfig::brightness)));
//#line 55 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.frame_id = "";
//#line 55 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.frame_id = "";
//#line 55 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.frame_id = "";
//#line 55 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<std::string>("frame_id", "str", 0, "Sets the TF frame from which the camera is publishing.", "", &WGE100MultiConfigurator_oldConfig::frame_id)));
//#line 56 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.first_packet_offset = 0.0;
//#line 56 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.first_packet_offset = 0.02;
//#line 56 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.first_packet_offset = 0.0025;
//#line 56 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("first_packet_offset", "double", 0, "Offset between the end of exposure and the minimal arrival time for the first frame packet.", "", &WGE100MultiConfigurator_oldConfig::first_packet_offset)));
//#line 57 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.ext_trig = 0;
//#line 57 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.ext_trig = 1;
//#line 57 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.ext_trig = 0;
//#line 57 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("ext_trig", "bool", 3, "Set camera to trigger from the external trigger input.", "", &WGE100MultiConfigurator_oldConfig::ext_trig)));
//#line 58 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.rising_edge_trig = 0;
//#line 58 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.rising_edge_trig = 1;
//#line 58 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.rising_edge_trig = 0;
//#line 58 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("rising_edge_trig", "bool", 3, "Indicates that the camera should trigger on rising edges.", "", &WGE100MultiConfigurator_oldConfig::rising_edge_trig)));
//#line 59 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.trig_controller = "";
//#line 59 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.trig_controller = "";
//#line 59 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.trig_controller = "";
//#line 59 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<std::string>("trig_controller", "str", 3, "Sets the trigger controller from which an externally trigged camera operates.", "", &WGE100MultiConfigurator_oldConfig::trig_controller)));
//#line 60 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.trig_rate = 1.0;
//#line 60 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.trig_rate = 100.0;
//#line 60 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.trig_rate = 30.0;
//#line 60 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("trig_rate", "double", 3, "Sets the triggering rate in externally triggered mode.", "", &WGE100MultiConfigurator_oldConfig::trig_rate)));
//#line 61 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.mirror_x = 0;
//#line 61 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.mirror_x = 1;
//#line 61 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.mirror_x = 0;
//#line 61 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("mirror_x", "bool", 3, "Mirrors the image left to right.", "", &WGE100MultiConfigurator_oldConfig::mirror_x)));
//#line 62 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.mirror_y = 0;
//#line 62 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.mirror_y = 1;
//#line 62 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.mirror_y = 0;
//#line 62 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("mirror_y", "bool", 3, "Mirrors the image top to bottom.", "", &WGE100MultiConfigurator_oldConfig::mirror_y)));
//#line 63 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.rotate_180 = 0;
//#line 63 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.rotate_180 = 1;
//#line 63 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.rotate_180 = 0;
//#line 63 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("rotate_180", "bool", 3, "Rotates the image 180 degrees. Acts in addition to mirror_?", "", &WGE100MultiConfigurator_oldConfig::rotate_180)));
//#line 64 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.enable_alternate = 0;
//#line 64 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.enable_alternate = 1;
//#line 64 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.enable_alternate = 0;
//#line 64 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("enable_alternate", "bool", 3, "Enable the alternate imager register set. The camera trigger signal selects the register set to use for each image.", "", &WGE100MultiConfigurator_oldConfig::enable_alternate)));
//#line 65 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.auto_exposure_alternate = 0;
//#line 65 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.auto_exposure_alternate = 1;
//#line 65 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.auto_exposure_alternate = 1;
//#line 65 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("auto_exposure_alternate", "bool", 3, "Sets the alternate camera exposure duration to automatic. Causes the @b exposure_alternate setting to be ignored.", "", &WGE100MultiConfigurator_oldConfig::auto_exposure_alternate)));
//#line 66 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.exposure_alternate = 0.0;
//#line 66 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.exposure_alternate = 0.1;
//#line 66 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.exposure_alternate = 0.01;
//#line 66 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("exposure_alternate", "double", 3, "Alternate camera exposure in seconds. The valid range depends on the video mode.", "", &WGE100MultiConfigurator_oldConfig::exposure_alternate)));
//#line 67 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.max_exposure_alternate = 0.0;
//#line 67 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.max_exposure_alternate = 0.1;
//#line 67 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.max_exposure_alternate = 0.0;
//#line 67 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<double>("max_exposure_alternate", "double", 3, "Alternate maximum exposure time in seconds. Zero for automatic.", "", &WGE100MultiConfigurator_oldConfig::max_exposure_alternate)));
//#line 68 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.auto_gain_alternate = 0;
//#line 68 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.auto_gain_alternate = 1;
//#line 68 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.auto_gain_alternate = 1;
//#line 68 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("auto_gain_alternate", "bool", 3, "Sets the alternate analog gain to automatic. Causes the @b gain_alternate setting to be ignored.", "", &WGE100MultiConfigurator_oldConfig::auto_gain_alternate)));
//#line 69 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.gain_alternate = 16;
//#line 69 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.gain_alternate = 64;
//#line 69 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.gain_alternate = 32;
//#line 69 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<int>("gain_alternate", "int", 3, "The alternate camera analog gain.", "", &WGE100MultiConfigurator_oldConfig::gain_alternate)));
//#line 70 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __min__.companding_alternate = 0;
//#line 70 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __max__.companding_alternate = 1;
//#line 70 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __default__.companding_alternate = 1;
//#line 70 "/tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/cfg/common_parameters_old.py"
      __param_descriptions__.push_back(WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr(new WGE100MultiConfigurator_oldConfig::ParamDescription<bool>("companding_alternate", "bool", 3, "Turns on companding for the alternate imager register set", "", &WGE100MultiConfigurator_oldConfig::companding_alternate)));
//#line 239 "/opt/ros/cturtle/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    WGE100MultiConfigurator_oldConfig __max__;
    WGE100MultiConfigurator_oldConfig __min__;
    WGE100MultiConfigurator_oldConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const WGE100MultiConfigurator_oldConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static WGE100MultiConfigurator_oldConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &WGE100MultiConfigurator_oldConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const WGE100MultiConfigurator_oldConfig &WGE100MultiConfigurator_oldConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const WGE100MultiConfigurator_oldConfig &WGE100MultiConfigurator_oldConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const WGE100MultiConfigurator_oldConfig &WGE100MultiConfigurator_oldConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<WGE100MultiConfigurator_oldConfig::AbstractParamDescriptionConstPtr> &WGE100MultiConfigurator_oldConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const WGE100MultiConfigurator_oldConfigStatics *WGE100MultiConfigurator_oldConfig::__get_statics__()
  {
    const static WGE100MultiConfigurator_oldConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = WGE100MultiConfigurator_oldConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __WGE100MULTICONFIGURATOR_OLDRECONFIGURATOR_H__
