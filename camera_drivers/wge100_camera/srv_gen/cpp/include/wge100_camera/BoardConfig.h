/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-cturtle-camera-drivers-1.2.7/debian/ros-cturtle-camera-drivers/opt/ros/cturtle/stacks/camera_drivers/wge100_camera/srv/BoardConfig.srv */
#ifndef WGE100_CAMERA_SERVICE_BOARDCONFIG_H
#define WGE100_CAMERA_SERVICE_BOARDCONFIG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace wge100_camera
{
template <class ContainerAllocator>
struct BoardConfigRequest_ : public ros::Message
{
  typedef BoardConfigRequest_<ContainerAllocator> Type;

  BoardConfigRequest_()
  : serial(0)
  , mac()
  {
  }

  BoardConfigRequest_(const ContainerAllocator& _alloc)
  : serial(0)
  , mac(_alloc)
  {
  }

  typedef uint32_t _serial_type;
  uint32_t serial;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _mac_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  mac;


  ROSCPP_DEPRECATED uint32_t get_mac_size() const { return (uint32_t)mac.size(); }
  ROSCPP_DEPRECATED void set_mac_size(uint32_t size) { mac.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_mac_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->mac; }
  ROSCPP_DEPRECATED void set_mac_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->mac = vec; }
private:
  static const char* __s_getDataType_() { return "wge100_camera/BoardConfigRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ec9bad54b410ebc79183d761c609dd76"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "785c6974990d2659ed40a68807b3f3bd"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
uint32 serial\n\
uint8[] mac\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, serial);
    ros::serialization::serialize(stream, mac);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, serial);
    ros::serialization::deserialize(stream, mac);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(serial);
    size += ros::serialization::serializationLength(mac);
    return size;
  }

  typedef boost::shared_ptr< ::wge100_camera::BoardConfigRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wge100_camera::BoardConfigRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct BoardConfigRequest
typedef  ::wge100_camera::BoardConfigRequest_<std::allocator<void> > BoardConfigRequest;

typedef boost::shared_ptr< ::wge100_camera::BoardConfigRequest> BoardConfigRequestPtr;
typedef boost::shared_ptr< ::wge100_camera::BoardConfigRequest const> BoardConfigRequestConstPtr;


template <class ContainerAllocator>
struct BoardConfigResponse_ : public ros::Message
{
  typedef BoardConfigResponse_<ContainerAllocator> Type;

  BoardConfigResponse_()
  : success(0)
  {
  }

  BoardConfigResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "wge100_camera/BoardConfigResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6cca7c80398b8b31af04b80534923f16"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "785c6974990d2659ed40a68807b3f3bd"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 success\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wge100_camera::BoardConfigResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct BoardConfigResponse
typedef  ::wge100_camera::BoardConfigResponse_<std::allocator<void> > BoardConfigResponse;

typedef boost::shared_ptr< ::wge100_camera::BoardConfigResponse> BoardConfigResponsePtr;
typedef boost::shared_ptr< ::wge100_camera::BoardConfigResponse const> BoardConfigResponseConstPtr;

struct BoardConfig
{

typedef BoardConfigRequest Request;
typedef BoardConfigResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BoardConfig
} // namespace wge100_camera

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::wge100_camera::BoardConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec9bad54b410ebc79183d761c609dd76";
  }

  static const char* value(const  ::wge100_camera::BoardConfigRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xec9bad54b410ebc7ULL;
  static const uint64_t static_value2 = 0x9183d761c609dd76ULL;
};

template<class ContainerAllocator>
struct DataType< ::wge100_camera::BoardConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wge100_camera/BoardConfigRequest";
  }

  static const char* value(const  ::wge100_camera::BoardConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wge100_camera::BoardConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
uint32 serial\n\
uint8[] mac\n\
\n\
";
  }

  static const char* value(const  ::wge100_camera::BoardConfigRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6cca7c80398b8b31af04b80534923f16";
  }

  static const char* value(const  ::wge100_camera::BoardConfigResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6cca7c80398b8b31ULL;
  static const uint64_t static_value2 = 0xaf04b80534923f16ULL;
};

template<class ContainerAllocator>
struct DataType< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wge100_camera/BoardConfigResponse";
  }

  static const char* value(const  ::wge100_camera::BoardConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::wge100_camera::BoardConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wge100_camera::BoardConfigRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.serial);
    stream.next(m.mac);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BoardConfigRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wge100_camera::BoardConfigResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BoardConfigResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wge100_camera::BoardConfig> {
  static const char* value() 
  {
    return "785c6974990d2659ed40a68807b3f3bd";
  }

  static const char* value(const wge100_camera::BoardConfig&) { return value(); } 
};

template<>
struct DataType<wge100_camera::BoardConfig> {
  static const char* value() 
  {
    return "wge100_camera/BoardConfig";
  }

  static const char* value(const wge100_camera::BoardConfig&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wge100_camera::BoardConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "785c6974990d2659ed40a68807b3f3bd";
  }

  static const char* value(const wge100_camera::BoardConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wge100_camera::BoardConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wge100_camera/BoardConfig";
  }

  static const char* value(const wge100_camera::BoardConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wge100_camera::BoardConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "785c6974990d2659ed40a68807b3f3bd";
  }

  static const char* value(const wge100_camera::BoardConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wge100_camera::BoardConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wge100_camera/BoardConfig";
  }

  static const char* value(const wge100_camera::BoardConfigResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WGE100_CAMERA_SERVICE_BOARDCONFIG_H

