/* Auto-generated by genmsg_cpp for file /home/reza/git/uh-scenarios/uh_simple_scenario1/srv/FacePose.srv */
#ifndef UH_SIMPLE_SCENARIO1_SERVICE_FACEPOSE_H
#define UH_SIMPLE_SCENARIO1_SERVICE_FACEPOSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"



namespace uh_simple_scenario1
{
template <class ContainerAllocator>
struct FacePoseRequest_ : public ros::Message
{
  typedef FacePoseRequest_<ContainerAllocator> Type;

  FacePoseRequest_()
  : a(0)
  , b(0)
  , img_in()
  {
  }

  FacePoseRequest_(const ContainerAllocator& _alloc)
  : a(0)
  , b(0)
  , img_in(_alloc)
  {
  }

  typedef int64_t _a_type;
  int64_t a;

  typedef int64_t _b_type;
  int64_t b;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _img_in_type;
   ::sensor_msgs::Image_<ContainerAllocator>  img_in;


private:
  static const char* __s_getDataType_() { return "uh_simple_scenario1/FacePoseRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0b7370745a161325e814e0f3a7e77105"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8b5ab9facb6a86166a2ffe67320b1159"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 a\n\
int64 b\n\
sensor_msgs/Image img_in\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, a);
    ros::serialization::serialize(stream, b);
    ros::serialization::serialize(stream, img_in);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, a);
    ros::serialization::deserialize(stream, b);
    ros::serialization::deserialize(stream, img_in);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(a);
    size += ros::serialization::serializationLength(b);
    size += ros::serialization::serializationLength(img_in);
    return size;
  }

  typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FacePoseRequest
typedef  ::uh_simple_scenario1::FacePoseRequest_<std::allocator<void> > FacePoseRequest;

typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseRequest> FacePoseRequestPtr;
typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseRequest const> FacePoseRequestConstPtr;


template <class ContainerAllocator>
struct FacePoseResponse_ : public ros::Message
{
  typedef FacePoseResponse_<ContainerAllocator> Type;

  FacePoseResponse_()
  : sum(0)
  , x(0.0)
  , y(0.0)
  {
  }

  FacePoseResponse_(const ContainerAllocator& _alloc)
  : sum(0)
  , x(0.0)
  , y(0.0)
  {
  }

  typedef int64_t _sum_type;
  int64_t sum;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;


private:
  static const char* __s_getDataType_() { return "uh_simple_scenario1/FacePoseResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8109199bae0754435a137ab44351f1a7"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8b5ab9facb6a86166a2ffe67320b1159"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 sum\n\
float64 x\n\
float64 y\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, sum);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, sum);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(sum);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    return size;
  }

  typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct FacePoseResponse
typedef  ::uh_simple_scenario1::FacePoseResponse_<std::allocator<void> > FacePoseResponse;

typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseResponse> FacePoseResponsePtr;
typedef boost::shared_ptr< ::uh_simple_scenario1::FacePoseResponse const> FacePoseResponseConstPtr;

struct FacePose
{

typedef FacePoseRequest Request;
typedef FacePoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FacePose
} // namespace uh_simple_scenario1

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b7370745a161325e814e0f3a7e77105";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b7370745a161325ULL;
  static const uint64_t static_value2 = 0xe814e0f3a7e77105ULL;
};

template<class ContainerAllocator>
struct DataType< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uh_simple_scenario1/FacePoseRequest";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 a\n\
int64 b\n\
sensor_msgs/Image img_in\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8109199bae0754435a137ab44351f1a7";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8109199bae075443ULL;
  static const uint64_t static_value2 = 0x5a137ab44351f1a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uh_simple_scenario1/FacePoseResponse";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 sum\n\
float64 x\n\
float64 y\n\
\n\
\n\
";
  }

  static const char* value(const  ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.a);
    stream.next(m.b);
    stream.next(m.img_in);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FacePoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sum);
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FacePoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<uh_simple_scenario1::FacePose> {
  static const char* value() 
  {
    return "8b5ab9facb6a86166a2ffe67320b1159";
  }

  static const char* value(const uh_simple_scenario1::FacePose&) { return value(); } 
};

template<>
struct DataType<uh_simple_scenario1::FacePose> {
  static const char* value() 
  {
    return "uh_simple_scenario1/FacePose";
  }

  static const char* value(const uh_simple_scenario1::FacePose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b5ab9facb6a86166a2ffe67320b1159";
  }

  static const char* value(const uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uh_simple_scenario1/FacePose";
  }

  static const char* value(const uh_simple_scenario1::FacePoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b5ab9facb6a86166a2ffe67320b1159";
  }

  static const char* value(const uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uh_simple_scenario1/FacePose";
  }

  static const char* value(const uh_simple_scenario1::FacePoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UH_SIMPLE_SCENARIO1_SERVICE_FACEPOSE_H

